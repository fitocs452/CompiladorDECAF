
import DECAF2.DECAF2Lexer;
import DECAF2.DECAF2Parser;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.antlr.v4.gui.Trees;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.stringtemplate.v4.gui.JTreeScopeStackModel;

/**
 *
 * @author GustavoAdolfo
 */
public class GUI extends javax.swing.JFrame {
    private int contTabs = 1;
    private TablesGenerator generadorTabla = new TablesGenerator();
    private JScrollPane tablaSimbolosView = new JScrollPane();
    private JScrollPane tablaMetodosView = new JScrollPane();
    private JScrollPane tablaStructView = new JScrollPane();
    private JScrollPane logView = new JScrollPane();
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        jTabbedPane1.addTab("Tab" + this.contTabs, createTab());
        logView = initializeLogAndTreeTabs("Welcome", Color.green);
        jTabbedPane2.addTab("Log - Compilador", logView);
        
        JTable tablaSimbolosView = new JTable(generadorTabla.getTablaSimbolos().getDefaultData(), generadorTabla.getTablaSimbolos().getColumNames());
        this.tablaSimbolosView = new JScrollPane(tablaSimbolosView);
        jTabbedPane2.addTab("Symbol Table", this.tablaSimbolosView);
        
        JTable tablaMetodosView = new JTable(generadorTabla.getTablaMetodos().getDefaultData(), generadorTabla.getTablaMetodos().getColumNames());
        this.tablaMetodosView = new JScrollPane(tablaMetodosView);
        jTabbedPane2.addTab("Method Table", this.tablaMetodosView);
        
        JTable tablaStructView = new JTable(generadorTabla.getTablaEstructura().getDefaultData(), generadorTabla.getTablaEstructura().getColumNames());
        this.tablaStructView = new JScrollPane(tablaStructView);
        jTabbedPane2.addTab("Struct Table", this.tablaStructView);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jSeparator3 = new javax.swing.JSeparator();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/addTab2.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/openFIleConverted.png"))); // NOI18N
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveFileConverted.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTabbedPane2.setToolTipText("");

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Salir");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Opciones texto");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Agregar tab");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Run");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Compilar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Mostrar imagen Ã¡rbol ");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane3)
                    .addComponent(jSeparator3)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // Agregar Tab
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.contTabs++;
        jTabbedPane1.addTab("Tab" + this.contTabs, createTab());
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JTextPane ta = getTextOfCurrentTab();
        ANTLRInputStream input = new ANTLRInputStream(ta.getText());
        DECAF2Lexer lexer = new DECAF2Lexer(input);
        
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        DECAF2Parser parser = new DECAF2Parser(tokens);
        
        DECAF2Parser.ProgramaContext tree = parser.programa();
        ParseTree hijo = tree.getChild(0);
        ParseTree arbolGen = hijo.getParent();
        Trees.inspect(tree, parser);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        ParseTree arbol = generarArbol();
        refreshLogText();
        if (arbol != null) {
            generarTabla();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.contTabs++;
        jTabbedPane1.addTab("Tab" + this.contTabs, createTab());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        saveAsAction();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    public JScrollPane initializeLogAndTreeTabs(String text, Color color) {
        JTextPane log = new JTextPane();
        log.setFont(new java.awt.Font("Eras Medium ITC", 0, 15));
        log.setBorder(javax.swing.BorderFactory.createTitledBorder("Log - Compilador"));
        if (color != null) {
            log.setForeground(color);
        }
        
        log.setText(text);
        
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(log);
        
        return scroll;
    }
    
    public void refreshTables() {
        List<JScrollPane> scrolls = findAllChildren(jTabbedPane2, JScrollPane.class);
        
        jTabbedPane2.remove(tablaSimbolosView);
        jTabbedPane2.remove(tablaMetodosView);
        jTabbedPane2.remove(tablaStructView);
        
        JTable tablaSimbolosView = new JTable(generadorTabla.getTablaSimbolos().getData(), generadorTabla.getTablaSimbolos().getColumNames());
        this.tablaSimbolosView = new JScrollPane(tablaSimbolosView);
        jTabbedPane2.addTab("Symbol Table", this.tablaSimbolosView);
        
        JTable tablaMetodosView = new JTable(generadorTabla.getTablaMetodos().getData(), generadorTabla.getTablaMetodos().getColumNames());
        this.tablaMetodosView = new JScrollPane(tablaMetodosView);
        jTabbedPane2.addTab("Method Table", this.tablaMetodosView);
        
        JTable tablaStructView = new JTable(generadorTabla.getTablaEstructura().getData(), generadorTabla.getTablaEstructura().getColumNames());
        this.tablaStructView = new JScrollPane(tablaStructView);
        jTabbedPane2.addTab("Struct Table", this.tablaStructView);
    }
    
    public JComponent createTab() {
        JTextPane textPane = new JTextPane();
        textPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        JScrollPane scrollPane = new JScrollPane(textPane);
        TextLineNumber tln = new TextLineNumber(textPane);
        scrollPane.setRowHeaderView( tln );
        
        return scrollPane;
    }
    
    public void showCodeInJPannedItem(ArrayList<String> datos) {
        JComponent textArea = (JComponent)jTabbedPane1.getSelectedComponent();
        
        JTextPane ta = getTextOfCurrentTab();
        String texto = new String();
        for (String s: datos) {
            texto += s + "\n";
        }
        ta.setText(texto);
    }

    public JTextPane getTextOfCurrentTab() {
        List<JTextPane> areas = findAllChildren((JComponent)jTabbedPane1.getSelectedComponent(), JTextPane.class);
        JTextPane ta = new JTextPane();
        if (areas.size() > 0) {
            ta = areas.get(0);
        }
        
        return ta;
    }
    
    public JTextPane getLogTextArea() {
        List<JTextPane> areas = findAllChildren((JComponent)jTabbedPane2.getSelectedComponent(), JTextPane.class);
        JTextPane ta = new JTextPane();
        if (areas.size() > 0) {
            ta = areas.get(0);
        }
        
        return ta;
    }
    
    public void refreshLogText(String text, Color color) {
        //String s = jTabbedPane2.getComponent(0).toString();
        //System.out.println(s);
        jTabbedPane2.remove(logView);
        logView = initializeLogAndTreeTabs(text, color);
        jTabbedPane2.addTab("Log - Compilador", logView);
    }
    
    public void refreshLogText() {
        this.imprimirMensajesLog();
    }
    
    public static <T extends Component> List<T> findAllChildren(JComponent component, Class<T> clazz) {
        List<T> lstChildren = new ArrayList<T>(5);
        for (Component comp : component.getComponents()) {
            if (clazz.isInstance(comp)) {
                lstChildren.add((T) comp);
            } else if (comp instanceof JComponent) {
                lstChildren.addAll(findAllChildren((JComponent) comp, clazz));
            }
        }

        return Collections.unmodifiableList(lstChildren);
    }    

    private ParseTree generarArbol() {
        JTextPane ta = getTextOfCurrentTab();
        ANTLRInputStream input = new ANTLRInputStream(ta.getText());
        DECAF2Lexer lexer = new DECAF2Lexer(input);
        
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        DECAF2Parser parser = new DECAF2Parser(tokens);
        
        parser.removeErrorListeners();
        parser.addErrorListener(DescriptiveErrorListener.INSTANCE);
        DECAF2Parser.ProgramaContext tree = parser.programa();
        
        JTextPane log = getLogTextArea();
                
        if (!DescriptiveErrorListener.errores.isEmpty()) {
            System.out.println("Tiene errores");
            // Mostrar errores
            
            refreshLogText(DescriptiveErrorListener.errores, Color.red);
            DescriptiveErrorListener.errores = new String();
            
            return null;
        }
        if (DescriptiveErrorListener.errores.isEmpty()){
            log.setText("");
            
            ParseTree hijo = tree.getChild(0);
            ParseTree arbolGen = hijo.getParent();
            //Trees.inspect(tree, program);

            TreeBuilder arbol = new TreeBuilder();
            JTree arbolGenerado = arbol.crearArbol(arbolGen, parser);
            arbolGenerado.setShowsRootHandles(true);

            DefaultTreeCellRenderer arbolRenderizado = (DefaultTreeCellRenderer) arbolGenerado.getCellRenderer();
            arbolRenderizado.setLeafIcon(null);
            arbolRenderizado.setClosedIcon(null);
            arbolRenderizado.setOpenIcon(null);

            Dimension dimension = new Dimension(800,800);
            //c.setPreferredSize(d);

            JPanel arbolView = new JPanel(new BorderLayout());
            JScrollPane scrollView = new JScrollPane(arbolGenerado);

            JFrame vista = new JFrame();
            arbolView.add(BorderLayout.CENTER, scrollView);
            
            /*JTabbedPane tabs = new JTabbedPane();
            JFrame frame = new JFrame();
            frame.add(new JButton("button"));
            tabs.addTab("1", frame.getContentPane());*/

            vista.add(arbolView);
            //vista.setPreferredSize(dimension);
            //vista.pack();
            //vista.setVisible(true);
            
            jTabbedPane3.removeAll();
            
            jTabbedPane3.addTab("Ãrbol", vista.getContentPane());
            
            return arbolGen; 
        }
        return null;
    } 
    
    private void generarTabla() {
        JTextPane ta = getTextOfCurrentTab();
        ANTLRInputStream input = new ANTLRInputStream(ta.getText());
        DECAF2Lexer lexer = new DECAF2Lexer(input);
        
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        DECAF2Parser parser = new DECAF2Parser(tokens);
        
        parser.removeErrorListeners();
        parser.addErrorListener(DescriptiveErrorListener.INSTANCE);
        DECAF2Parser.ProgramaContext tree = parser.programa();
        
        generadorTabla = new TablesGenerator(tree);
        refreshTables();
        refreshLogText();
        
        generarCodigoIntermedio(generadorTabla, tree);
    }

    private void generarCodigoIntermedio(TablesGenerator tablas, DECAF2Parser.ProgramaContext tree) {
        IntermediateCodeGenerator codigoIntermedio = new IntermediateCodeGenerator(tablas, tree);
    }
    
    public void openFile() {
            String aux = "";   
        ArrayList<String> lineas = new ArrayList();
        try {
            JFileChooser file=new JFileChooser("C://Users//GustavoAdolfo//Desktop");
            file.showOpenDialog(this);
            File abre=file.getSelectedFile();

            if(abre!=null) {     
                FileReader archivos=new FileReader(abre);
                BufferedReader lee=new BufferedReader(archivos);
                while((aux=lee.readLine())!=null){
                    //program.add(aux);
                    lineas.add(aux);
                }
                lee.close();
            }
            showCodeInJPannedItem(lineas);
        }
        catch(IOException ex){
            JOptionPane.showMessageDialog(null,ex+"" + "\nNo se ha encontrado el archivo","ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void saveAsAction() {
        JFileChooser fileChooser = new JFileChooser();
        int exInput = JOptionPane.NO_OPTION;
        File file = null;

        // use a do-while and "no" to reshow the save dialog if exists

        do {
            int returnVal = fileChooser.showSaveDialog(null);

            if (returnVal != JFileChooser.APPROVE_OPTION) {
                return;
            }

            file = fileChooser.getSelectedFile();

            if (!file.getName().endsWith(".txt")) {
                file = new File(file.getParentFile(), file.getName() + ".txt");
            }

            if (file.exists()) {
                exInput = JOptionPane.showConfirmDialog(
                                null, "This file already exists, overwrite it?");

                if (exInput == JOptionPane.CANCEL_OPTION) {
                    return;
                } else {
                
                }
            }
        } while (file.exists() && exInput == JOptionPane.NO_OPTION);

        JTextPane actual = getTextOfCurrentTab();

        if (actual != null) {
            String text = actual.getText();
            writeToFile(file, text);
            //selectedComp.setFile(file);

        } else {
            System.out.println("No component selected");
            return;
        }
    }
    
    private static File writeToFile(File file, String text) {

        try {

            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);

            bw.write(text);
            bw.close();

            return file;

        } catch(Exception e) {
            System.out.println("err");
            return null;
        }
    }
    
    private void imprimirMensajesLog() {
        jTabbedPane2.remove(logView);
        String text = new String();
        
        JTextPane textPane = new JTextPane();
        textPane.setFont(new java.awt.Font("Eras Medium ITC", 0, 15));
        textPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Log - Compilador"));
        
        StyledDocument docStyle = textPane.getStyledDocument();
        
        ArrayList<MensajeLog> mensajesLog  = generadorTabla.getMensajes();
        for (MensajeLog message: mensajesLog) {
            Style style = textPane.addStyle("Simple", null);
            StyleConstants.setForeground(style, Color.BLUE);
            if (message.isIsError()) {
                style = textPane.addStyle("Error", null);
                StyleConstants.setForeground(style, Color.red);
            }
            
            try {
                docStyle.insertString(docStyle.getLength(), message.getMensaje() + "\n", style);
            }
            catch (BadLocationException e){
                System.out.println("No se pudo agregar un mensaje");
            }
        }
        
        textPane.setEditable(false);
        
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(textPane);
        
        logView = scroll;
        jTabbedPane2.addTab("Log - Compilador", logView);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    // End of variables declaration//GEN-END:variables
}
